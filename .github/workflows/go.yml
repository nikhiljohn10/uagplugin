name: Build binaries and create GitHub Release

on:
  push:
    tags:
      - "*"

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      on_main: ${{ steps.check.outputs.on_main }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure tag commit is on main
        id: check
        run: |
          git fetch --no-tags origin main
          if git merge-base --is-ancestor "$GITHUB_SHA" origin/main; then
            echo "on_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "on_main=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: gate
    if: needs.gate.outputs.on_main == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.0"

      - name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
          BINARY_NAME: uagplugin
        run: |
          mkdir -p dist
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT_DIR="dist/${GOOS}_${GOARCH}"
          mkdir -p "$OUT_DIR"
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          LDFLAGS="-s -w -X github.com/nikhiljohn10/uagplugin/internal/version.Version=${GITHUB_REF_NAME} -X github.com/nikhiljohn10/uagplugin/internal/version.Commit=${GITHUB_SHA} -X github.com/nikhiljohn10/uagplugin/internal/version.Date=${BUILD_DATE}"
          go build -trimpath -ldflags "$LDFLAGS" -o "$OUT_DIR/${BINARY_NAME}${EXT}" .
          ARCHIVE_BASENAME="${BINARY_NAME}_${GOOS}_${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            (cd "$OUT_DIR" && zip -r "../${ARCHIVE_BASENAME}.zip" "${BINARY_NAME}${EXT}")
            echo "ARTIFACT=dist/${ARCHIVE_BASENAME}.zip" >> $GITHUB_ENV
          else
            (cd "$OUT_DIR" && tar -czf "../${ARCHIVE_BASENAME}.tar.gz" "${BINARY_NAME}${EXT}")
            echo "ARTIFACT=dist/${ARCHIVE_BASENAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: ${{ env.ARTIFACT }}
