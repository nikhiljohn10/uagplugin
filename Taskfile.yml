version: "3"

vars:
  BIN: uagplugin
  BUILD_DIR: bin
  PKG: ./...

tasks:
  default:
    desc: List available tasks
    cmds:
      - task -l

  tidy:
    desc: Sync go.mod and go.sum
    cmds:
      - go mod tidy

  fmt:
    desc: Format code
    cmds:
      - go fmt {{.PKG}}

  vet:
    desc: Run go vet
    deps: [fmt]
    cmds:
      - go vet {{.PKG}}

  lint:
    desc: Run linters (golangci-lint if available; falls back to go vet)
    cmds:
      - |
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run ./...
        else
          echo "golangci-lint not found; running go vet instead"
          go vet {{.PKG}}
        fi

  run:
    desc: Run the app directly (passes CLI args)
    env:
      UAG_ENV: development
    cmds:
      - go run . {{.CLI_ARGS}}

  install:
    desc: "Install example plugin"
    env:
      UAG_ENV: development
    cmds:
      - go run . install --dir ./examples/uag-fileplugin
      - go run . install --dir ./examples/uag-apiplugin

  exec:
    desc: Run the built binary (builds first)
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BIN}} {{.CLI_ARGS}}

  test:
    desc: Run unit tests with race detector and coverage
    cmds:
      - go test -race -coverprofile=coverage.out {{.PKG}}
      - go tool cover -func=coverage.out | tail -n 1 || true
    sources:
      - "**/*.go"
    generates:
      - coverage.out

  clean:
    desc: Remove build artifacts and clean test cache
    cmds:
      - rm -rf {{.BUILD_DIR}} coverage.out
      - go clean -testcache

  watch:
    desc: Rebuild and run on changes (requires reflex)
    cmds:
      - |
        if command -v reflex >/dev/null 2>&1; then
          reflex -r '\.go$' -- sh -c 'task exec'
        else
          echo "Install reflex: go install github.com/cespare/reflex@latest"
          exit 1
        fi

  build-all:
    desc: Build release binaries for Linux, macOS, and Windows with embedded version info (uses latest tag by default)
    silent: true
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        VERSION="${VERSION:-$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)}"; \
        COMMIT="$(git rev-parse --short HEAD)"; \
        DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"; \
        LDFLAGS="-s -w -X github.com/nikhiljohn10/uagplugin/internal/version.Version=${VERSION} -X github.com/nikhiljohn10/uagplugin/internal/version.Commit=${COMMIT} -X github.com/nikhiljohn10/uagplugin/internal/version.Date=${DATE}"; \
        targets="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"; \
        for target in $targets; do \
          GOOS="${target%%/*}"; GOARCH="${target##*/}"; \
          EXT=""; OUT_BASE="{{.BUILD_DIR}}/{{.BIN}}-${GOOS}-${GOARCH}-${VERSION}"; \
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi; \
          OUT="${OUT_BASE}${EXT}"; \
          echo "Building ${VERSION} (${COMMIT}) ${DATE} for ${GOOS}/${GOARCH}"; \
          CGO_ENABLED=0 GOOS="$GOOS" GOARCH="$GOARCH" go build -trimpath -ldflags "$LDFLAGS" -o "$OUT" .; \
          if command -v sha256sum >/dev/null 2>&1; then sha256sum "$OUT" > "$OUT.sha256"; fi; \
        done

  build:
    desc: Build a release binary for the current platform with embedded version info
    silent: true
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        VERSION="${VERSION:-$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)}"; \
        COMMIT="$(git rev-parse --short HEAD)"; \
        DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"; \
        LDFLAGS="-s -w -X github.com/nikhiljohn10/uagplugin/internal/version.Version=${VERSION} -X github.com/nikhiljohn10/uagplugin/internal/version.Commit=${COMMIT} -X github.com/nikhiljohn10/uagplugin/internal/version.Date=${DATE}"; \
        echo "Building ${VERSION} (${COMMIT}) ${DATE} for $(go env GOOS)/$(go env GOARCH)"; \
        go build -trimpath -ldflags "$LDFLAGS" -o {{.BUILD_DIR}}/{{.BIN}} .; \
        ./{{.BUILD_DIR}}/{{.BIN}} version

  version:
    desc: Preview version output using ldflags from git tag/commit/date (no artifact kept)
    silent: true
    cmds:
      - |
        VERSION="${VERSION:-$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)}"; \
        COMMIT="$(git rev-parse --short HEAD)"; \
        DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"; \
        LDFLAGS="-X github.com/nikhiljohn10/uagplugin/internal/version.Version=${VERSION} -X github.com/nikhiljohn10/uagplugin/internal/version.Commit=${COMMIT} -X github.com/nikhiljohn10/uagplugin/internal/version.Date=${DATE}"; \
        go build -trimpath -ldflags "$LDFLAGS" -o /tmp/{{.BIN}} . && /tmp/{{.BIN}} version

  release:
    desc: "Create and push an annotated git tag (usage: task release VERSION=X.Y.Z)"
    silent: true
    cmds:
      - test -n "{{.VERSION}}" || (echo "Set VERSION=X.Y.Z via 'task release VERSION=X.Y.Z'" && exit 1)
      - git tag -a v{{.VERSION}} -m "Release v{{.VERSION}}"
      - git push origin v{{.VERSION}}
      - echo "Waiting for GitHub to process the new tag..."
      - sleep 5 && go install github.com/nikhiljohn10/uagplugin@v{{.VERSION}} && rm -f $(which uagplugin)
      - echo "Released uagplugin v{{.VERSION}}."

  prepare:
    desc: Pre-flight checks before tagging (clean tree, verify, and show computed version)
    cmds:
      - task: verify
      - task: version

  verify:
    desc: Quick checks (tidy, fmt, vet, test)
    deps: [tidy, fmt, vet, test]
